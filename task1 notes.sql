CREATE DATABASE ORG;
USE ORG;
CREATE TABLE Customers (
CustomerID INT PRIMARY KEY,
Name VARCHAR(255),
Email VARCHAR(255),
JoinDate DATE
);

CREATE TABLE Products (
ProductID INT PRIMARY KEY,
Name VARCHAR(255),
Category VARCHAR(255),
Price DECIMAL(10, 2)
);

CREATE TABLE Orders (
OrderID INT PRIMARY KEY,
CustomerID INT,
OrderDate DATE,
TotalAmount DECIMAL(10, 2),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE TABLE OrderDetails (
OrderDetailID INT PRIMARY KEY,
OrderID INT,
ProductID INT,
Quantity INT,
PricePerUnit DECIMAL(10, 2),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

INSERT INTO Customers (CustomerID, Name, Email, JoinDate) VALUES
(1, 'John Doe', 'johndoe@example.com', '2021-01-10'),
(2, 'Anusha', 'anushasure@example.com', '2022-01-15'),
(3, 'Sirisha', 'sirishasure@example.com', '2023-01-15'),
(4, 'Sreenivas', 'sreenivasbolla@example.com', '2024-01-15'),
(5, 'Likhil', 'Likhilsure@example.com', '2019-01-15'),
(6, 'Diana', 'Dianasmith@example.com', '2018-01-15'),
(7, 'sunil', 'sunilsandha@example.com', '2017-01-15'),
(8, 'jagan', 'jaganmoya@example.com', '2016-01-15'),
(9, 'Lokesh', 'Lokeshmaya@example.com', '2015-01-15'),
(10, 'aravind', 'Aravindgattamaneni@example.com', '2014-03-05');

INSERT INTO Products (ProductID, Name, Category, Price) VALUES
(1, 'Laptop', 'Electronics', 999.99),
(2, 'Smartphone', 'Electronics', 499.99),
(3, 'Telephone', 'Electronics', 1599.99),
(4, 'Microphone', 'Electronics', 579.99),
(5, 'Microoven', 'Electronics', 600.99),
(6, 'Fridge', 'Electronics', 1599.99),
(7, 'Television', 'Electronics', 899.99),
(8, 'Ipad', 'Electronics', 288.99),
(9, 'Iphone', 'Electronics', 2099.99),
(10, 'Desk Lamp', 'Home Decor', 29.99);

INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount)
VALUES
(1, 1, '2020-02-15', 1499.98),
(2, 2, '2020-02-17', 499.99),
(3, 3, '2020-02-17', 599.99),
(4, 4, '2020-02-17', 750.99),
(5, 5, '2020-02-17', 677.99),
(6, 6, '2020-02-17', 850.99),
(7, 7, '2020-02-17', 1433.99),
(8, 8, '2020-02-17', 1569.99),
(9, 9, '2020-02-17', 650.99),
(10, 10, '2020-03-21', 78.99);

INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity,
PricePerUnit) VALUES
(1, 1, 1, 1, 999.99),
(2, 1, 2, 1, 499.99),
(3, 2, 3, 2, 199.99),
(4, 2, 1, 1, 299.99),
(5, 3, 2, 3, 399.99),
(6, 3, 3, 1, 599.99),
(7, 4, 1,2, 899.99),
(8, 4, 2, 1, 1599.99),
(9, 5, 3, 4, 279.99),
(10, 5, 1, 2, 29.99);

select * from Customers;
select * from Products;
select * from Orders;
select * from OrderDetails;

1. # Basic Queries:

1.1. List all customers.
select * from Customers;
SELECT CustomerId, Name, Email ,JoinDate FROM customers;

1.2. Show all products in the 'Electronics' category.
SELECT *
FROM Products
WHERE category = 'Electronics';

1.3. Find the total number of orders placed.
SELECT COUNT(*) AS total_orders
FROM orders;

1.4. Display the details of the most recent order.
SELECT *
FROM Orders
ORDER BY OrderDate DESC
LIMIT 1;

## 2. Joins and Relationships:

2.1. List all products along with the names of the customers who ordered them.
SELECT 
    p.ProductID,
    p.Name AS ProductName,
    p.Category,
    p.Price,
    c.Name AS CustomerName
FROM 
    Products p
JOIN 
    OrderDetails od ON p.ProductID = od.ProductID
JOIN 
    Orders o ON od.OrderID = o.OrderID
JOIN 
    Customers c ON o.CustomerID = c.CustomerID;
    
2.2. Show orders that include more than one product.
SELECT 
    o.OrderID,
    COUNT(od.ProductID) AS NumberOfProducts
FROM 
    Orders o
JOIN 
    OrderDetails od ON o.OrderID = od.OrderID
GROUP BY 
    o.OrderID
HAVING 
    COUNT(od.ProductID) > 1;
    
2.3. Find the total sales amount for each customer.
SELECT 
    c.CustomerID,
    c.Name AS CustomerName,
    SUM(od.Quantity * od.PricePerUnit) AS TotalSalesAmount
FROM 
    Customers c
JOIN 
    Orders o ON c.CustomerID = o.CustomerID
JOIN 
    OrderDetails od ON o.OrderID = od.OrderID
GROUP BY 
    c.CustomerID, c.Name;
    
### 3. Aggregation and Grouping:
3.1. Calculate the total revenue generated by each product category.
SELECT 
    p.Category,
    SUM(od.Quantity * od.PricePerUnit) AS TotalRevenue
FROM 
    Products p
JOIN 
    OrderDetails od ON p.ProductID = od.ProductID
GROUP BY 
    p.Category;
    
3.2. Determine the average order value.
SELECT 
    AVG(TotalAmount) AS AverageOrderValue
FROM 
    Orders;
    
3.3. Find the month with the highest number of orders
SELECT 
    EXTRACT(MONTH FROM OrderDate) AS OrderMonth,
    COUNT(*) AS NumberOfOrders
FROM 
    Orders
GROUP BY 
    OrderMonth
ORDER BY 
    NumberOfOrders DESC
LIMIT 1;

#### 4. Subqueries and Nested Queries:

4.1. Identify customers who have not placed any orders.
SELECT 
    c.CustomerID,
    c.Name AS CustomerName
FROM 
    Customers c
LEFT JOIN 
    Orders o ON c.CustomerID = o.CustomerID
WHERE 
    o.OrderID IS NULL;
    
4.2. Find products that have never been ordered.
SELECT 
    p.ProductID,
    p.Name AS ProductName
FROM 
    Products p
LEFT JOIN 
    OrderDetails od ON p.ProductID = od.ProductID
WHERE 
    od.OrderDetailID IS NULL;
    
4.3. Show the top 3 best-selling products
SELECT 
    p.ProductID,
    p.Name AS ProductName,
    SUM(od.Quantity) AS TotalQuantitySold
FROM 
    Products p
JOIN 
    OrderDetails od ON p.ProductID = od.ProductID
GROUP BY 
    p.ProductID, p.Name
ORDER BY 
    TotalQuantitySold DESC
LIMIT 3;

##### 5 Date and Time Functions:

5.1. List orders placed in the last month.
SELECT 
    OrderID,
    CustomerID,
    OrderDate,
    TotalAmount
FROM 
    Orders
WHERE 
    OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);
    
5.2.Determine the oldest customer in terms of membership duration.
SELECT 
    CustomerID,
    Name AS CustomerName,
    JoinDate,
    DATEDIFF(CURRENT_DATE, JoinDate) AS MembershipDurationInDays
FROM 
    Customers
ORDER BY 
    MembershipDurationInDays DESC
LIMIT 1;

######6. Advanced Queries:

6.1. Rank customers based on their total spending.
SELECT
    c.CustomerID,
    c.Name,
    c.Email,
    SUM(o.TotalAmount) AS TotalSpending
FROM
    Customers c
JOIN
    Orders o ON c.CustomerID = o.CustomerID
GROUP BY
    c.CustomerID, c.Name, c.Email
ORDER BY
    TotalSpending DESC;
    
6.2. Identify the most popular product category.
SELECT 
    p.Category,
    SUM(od.Quantity) AS TotalQuantitySold
FROM 
    Products p
JOIN 
    OrderDetails od ON p.ProductID = od.ProductID
GROUP BY 
    p.Category
ORDER BY 
    TotalQuantitySold DESC
LIMIT 1;

6.3. Calculate the month-over-month growth rate in sales
WITH MonthlySales AS (
    SELECT 
        DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
        SUM(TotalAmount) AS MonthlyTotal
    FROM 
        Orders
    GROUP BY 
        DATE_FORMAT(OrderDate, '%Y-%m')
)
SELECT 
    Month,
    MonthlyTotal,
    (MonthlyTotal / LAG(MonthlyTotal) OVER (ORDER BY Month) - 1) * 100 AS GrowthRate
FROM 
    MonthlySales
ORDER BY 
    Month;
    
####### 7.Data Manipulation and Updates:

7.1. Add a new customer to the Customers table.
INSERT INTO Customers (CustomerID, Name, Email, JoinDate)
VALUES (11, 'sumanjoshi', 'sumanjoshi@example.com', '2016-11-15');

7.2. Update the price of a specific product.
UPDATE Products
SET Price = 1245.99
WHERE ProductID =4 ;
